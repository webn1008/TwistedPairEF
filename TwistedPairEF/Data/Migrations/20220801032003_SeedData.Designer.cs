// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TwistedPairEF.Data;

#nullable disable

namespace TwistedPairEF.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220801032003_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TwistedPairEF.Models.PairModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstBinderColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PairNumber")
                        .HasColumnType("int");

                    b.Property<string>("SecondBinderColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondColor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PairsModel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstColor = "white",
                            PairNumber = 1,
                            SecondColor = "blue"
                        },
                        new
                        {
                            Id = 2,
                            FirstColor = "white",
                            PairNumber = 2,
                            SecondColor = "orange"
                        },
                        new
                        {
                            Id = 3,
                            FirstColor = "white",
                            PairNumber = 3,
                            SecondColor = "green"
                        },
                        new
                        {
                            Id = 4,
                            FirstColor = "white",
                            PairNumber = 4,
                            SecondColor = "brown"
                        },
                        new
                        {
                            Id = 5,
                            FirstColor = "white",
                            PairNumber = 5,
                            SecondColor = "slate"
                        },
                        new
                        {
                            Id = 6,
                            FirstColor = "red",
                            PairNumber = 6,
                            SecondColor = "blue"
                        },
                        new
                        {
                            Id = 7,
                            FirstColor = "red",
                            PairNumber = 7,
                            SecondColor = "orange"
                        },
                        new
                        {
                            Id = 8,
                            FirstColor = "red",
                            PairNumber = 8,
                            SecondColor = "green"
                        },
                        new
                        {
                            Id = 9,
                            FirstColor = "red",
                            PairNumber = 9,
                            SecondColor = "brown"
                        },
                        new
                        {
                            Id = 10,
                            FirstColor = "red",
                            PairNumber = 10,
                            SecondColor = "slate"
                        },
                        new
                        {
                            Id = 11,
                            FirstColor = "black",
                            PairNumber = 11,
                            SecondColor = "blue"
                        },
                        new
                        {
                            Id = 12,
                            FirstColor = "black",
                            PairNumber = 12,
                            SecondColor = "orange"
                        },
                        new
                        {
                            Id = 13,
                            FirstColor = "black",
                            PairNumber = 13,
                            SecondColor = "green"
                        },
                        new
                        {
                            Id = 14,
                            FirstColor = "black",
                            PairNumber = 14,
                            SecondColor = "brown"
                        },
                        new
                        {
                            Id = 15,
                            FirstColor = "black",
                            PairNumber = 15,
                            SecondColor = "slate"
                        },
                        new
                        {
                            Id = 16,
                            FirstColor = "yellow",
                            PairNumber = 16,
                            SecondColor = "blue"
                        },
                        new
                        {
                            Id = 17,
                            FirstColor = "yellow",
                            PairNumber = 17,
                            SecondColor = "orange"
                        },
                        new
                        {
                            Id = 18,
                            FirstColor = "yellow",
                            PairNumber = 18,
                            SecondColor = "green"
                        },
                        new
                        {
                            Id = 19,
                            FirstColor = "yellow",
                            PairNumber = 19,
                            SecondColor = "brown"
                        },
                        new
                        {
                            Id = 20,
                            FirstColor = "yellow",
                            PairNumber = 20,
                            SecondColor = "slate"
                        },
                        new
                        {
                            Id = 21,
                            FirstColor = "violet",
                            PairNumber = 21,
                            SecondColor = "blue"
                        },
                        new
                        {
                            Id = 22,
                            FirstColor = "violet",
                            PairNumber = 22,
                            SecondColor = "orange"
                        },
                        new
                        {
                            Id = 23,
                            FirstColor = "violet",
                            PairNumber = 23,
                            SecondColor = "green"
                        },
                        new
                        {
                            Id = 24,
                            FirstColor = "violet",
                            PairNumber = 24,
                            SecondColor = "brown"
                        },
                        new
                        {
                            Id = 25,
                            FirstColor = "violet",
                            PairNumber = 25,
                            SecondColor = "slate"
                        },
                        new
                        {
                            Id = 26,
                            FirstBinderColor = "white",
                            FirstColor = "white",
                            PairNumber = 26,
                            SecondBinderColor = "blue",
                            SecondColor = "blue"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
